$date
	Mon Jan 20 01:37:42 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module bttnTB $end
$var wire 2 ! led [1:0] $end
$var wire 12 " Y [11:0] $end
$var reg 4 # A [3:0] $end
$var reg 4 $ B [3:0] $end
$var reg 3 % opCodeA [2:0] $end
$var reg 2 & select [1:0] $end
$scope module uut $end
$var wire 4 ' A [3:0] $end
$var wire 4 ( B [3:0] $end
$var wire 3 ) opCodeA [2:0] $end
$var wire 2 * select [1:0] $end
$var wire 12 + selectY [11:0] $end
$var wire 2 , led [1:0] $end
$var wire 12 - Y [11:0] $end
$scope module a1 $end
$var wire 4 . A [3:0] $end
$var wire 4 / B [3:0] $end
$var wire 1 0 CarryIN $end
$var wire 3 1 opCodeA [2:0] $end
$var wire 4 2 wireY [3:0] $end
$var wire 8 3 wireM [7:0] $end
$var wire 4 4 wireLA [3:0] $end
$var wire 4 5 sub_Y [3:0] $end
$var wire 4 6 resultX [3:0] $end
$var wire 4 7 resultO [3:0] $end
$var wire 4 8 resultA [3:0] $end
$var wire 1 9 overflow $end
$var wire 8 : opwireM [7:0] $end
$var wire 8 ; opCode8 [7:0] $end
$var wire 4 < lUOutput2 [3:0] $end
$var wire 4 = lUOutput1 [3:0] $end
$var wire 12 > bcd [11:0] $end
$var wire 4 ? add_Y [3:0] $end
$var wire 4 @ aUtemp2 [3:0] $end
$var wire 4 A aUtemp1 [3:0] $end
$var wire 8 B Y [7:0] $end
$var wire 1 C CarryOUT $end
$scope module aU $end
$var wire 4 D A [3:0] $end
$var wire 4 E B [3:0] $end
$var wire 1 0 CarryIN $end
$var wire 1 C CarryOUT $end
$var wire 2 F opCode [1:0] $end
$var wire 1 9 overflow $end
$var wire 1 G tempCAdd $end
$var wire 1 H tempCSub $end
$var wire 1 I tempoverflow $end
$var wire 4 J sub_Y [3:0] $end
$var wire 4 K subY [3:0] $end
$var wire 4 L add_Y [3:0] $end
$var wire 4 M addY [3:0] $end
$var wire 1 N CarryOUTSUB $end
$var wire 1 O CarryOUTADD $end
$scope module a1 $end
$var wire 4 P A [3:0] $end
$var wire 4 Q B [3:0] $end
$var wire 1 0 CarryIN $end
$var wire 1 I overflow $end
$var wire 4 R Y [3:0] $end
$var wire 1 O CarryOUT $end
$var wire 3 S Carry4 [2:0] $end
$scope module f0 $end
$var wire 1 T A $end
$var wire 1 U B $end
$var wire 1 0 Carry $end
$var wire 1 V CarryO $end
$var wire 1 W xor1 $end
$var wire 1 X and2 $end
$var wire 1 Y and1 $end
$var wire 1 Z Sum $end
$scope module h1 $end
$var wire 1 T A $end
$var wire 1 U B $end
$var wire 1 Y Carry $end
$var wire 1 W Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 W A $end
$var wire 1 0 B $end
$var wire 1 X Carry $end
$var wire 1 Z Sum $end
$upscope $end
$upscope $end
$scope module f1 $end
$var wire 1 [ A $end
$var wire 1 \ B $end
$var wire 1 ] Carry $end
$var wire 1 ^ CarryO $end
$var wire 1 _ xor1 $end
$var wire 1 ` and2 $end
$var wire 1 a and1 $end
$var wire 1 b Sum $end
$scope module h1 $end
$var wire 1 [ A $end
$var wire 1 \ B $end
$var wire 1 a Carry $end
$var wire 1 _ Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 _ A $end
$var wire 1 ] B $end
$var wire 1 ` Carry $end
$var wire 1 b Sum $end
$upscope $end
$upscope $end
$scope module f2 $end
$var wire 1 c A $end
$var wire 1 d B $end
$var wire 1 e Carry $end
$var wire 1 f CarryO $end
$var wire 1 g xor1 $end
$var wire 1 h and2 $end
$var wire 1 i and1 $end
$var wire 1 j Sum $end
$scope module h1 $end
$var wire 1 c A $end
$var wire 1 d B $end
$var wire 1 i Carry $end
$var wire 1 g Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 g A $end
$var wire 1 e B $end
$var wire 1 h Carry $end
$var wire 1 j Sum $end
$upscope $end
$upscope $end
$scope module f3 $end
$var wire 1 k A $end
$var wire 1 l B $end
$var wire 1 m Carry $end
$var wire 1 O CarryO $end
$var wire 1 n xor1 $end
$var wire 1 o and2 $end
$var wire 1 p and1 $end
$var wire 1 q Sum $end
$scope module h1 $end
$var wire 1 k A $end
$var wire 1 l B $end
$var wire 1 p Carry $end
$var wire 1 n Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 n A $end
$var wire 1 m B $end
$var wire 1 o Carry $end
$var wire 1 q Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module s1 $end
$var wire 4 r A [3:0] $end
$var wire 4 s B [3:0] $end
$var wire 1 0 BorrowIN $end
$var wire 4 t tempB [3:0] $end
$var wire 4 u Y [3:0] $end
$var wire 1 N BorrowOUT $end
$scope module f0 $end
$var wire 1 v A $end
$var wire 1 w B $end
$var wire 1 0 BorrowIN $end
$var wire 1 x BorrowOut $end
$var wire 1 y tempD $end
$var wire 1 z tempB2 $end
$var wire 1 { tempB1 $end
$var wire 1 | Difference $end
$scope module hf1 $end
$var wire 1 v A $end
$var wire 1 w B $end
$var wire 1 { Borrow $end
$var wire 1 y Difference $end
$var wire 1 } notA $end
$upscope $end
$scope module hf2 $end
$var wire 1 y A $end
$var wire 1 0 B $end
$var wire 1 z Borrow $end
$var wire 1 | Difference $end
$var wire 1 ~ notA $end
$upscope $end
$upscope $end
$scope module f1 $end
$var wire 1 !" A $end
$var wire 1 "" B $end
$var wire 1 #" BorrowIN $end
$var wire 1 $" BorrowOut $end
$var wire 1 %" tempD $end
$var wire 1 &" tempB2 $end
$var wire 1 '" tempB1 $end
$var wire 1 (" Difference $end
$scope module hf1 $end
$var wire 1 !" A $end
$var wire 1 "" B $end
$var wire 1 '" Borrow $end
$var wire 1 %" Difference $end
$var wire 1 )" notA $end
$upscope $end
$scope module hf2 $end
$var wire 1 %" A $end
$var wire 1 #" B $end
$var wire 1 &" Borrow $end
$var wire 1 (" Difference $end
$var wire 1 *" notA $end
$upscope $end
$upscope $end
$scope module f2 $end
$var wire 1 +" A $end
$var wire 1 ," B $end
$var wire 1 -" BorrowIN $end
$var wire 1 ." BorrowOut $end
$var wire 1 /" tempD $end
$var wire 1 0" tempB2 $end
$var wire 1 1" tempB1 $end
$var wire 1 2" Difference $end
$scope module hf1 $end
$var wire 1 +" A $end
$var wire 1 ," B $end
$var wire 1 1" Borrow $end
$var wire 1 /" Difference $end
$var wire 1 3" notA $end
$upscope $end
$scope module hf2 $end
$var wire 1 /" A $end
$var wire 1 -" B $end
$var wire 1 0" Borrow $end
$var wire 1 2" Difference $end
$var wire 1 4" notA $end
$upscope $end
$upscope $end
$scope module f3 $end
$var wire 1 5" A $end
$var wire 1 6" B $end
$var wire 1 7" BorrowIN $end
$var wire 1 N BorrowOut $end
$var wire 1 8" tempD $end
$var wire 1 9" tempB2 $end
$var wire 1 :" tempB1 $end
$var wire 1 ;" Difference $end
$scope module hf1 $end
$var wire 1 5" A $end
$var wire 1 6" B $end
$var wire 1 :" Borrow $end
$var wire 1 8" Difference $end
$var wire 1 <" notA $end
$upscope $end
$scope module hf2 $end
$var wire 1 8" A $end
$var wire 1 7" B $end
$var wire 1 9" Borrow $end
$var wire 1 ;" Difference $end
$var wire 1 =" notA $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module btod1 $end
$var wire 8 >" binary [7:0] $end
$var wire 1 ?" empty1 $end
$var wire 1 @" empty2 $end
$var wire 4 A" dab5 [3:0] $end
$var wire 4 B" dab4 [3:0] $end
$var wire 4 C" dab3 [3:0] $end
$var wire 4 D" dab2 [3:0] $end
$var wire 4 E" dab1 [3:0] $end
$var wire 12 F" bcd [11:0] $end
$scope module d1t $end
$var wire 1 ?" A $end
$var wire 1 G" B $end
$var wire 1 H" C $end
$var wire 1 I" D $end
$var wire 1 J" E $end
$var wire 1 K" X $end
$var wire 1 L" Y $end
$var wire 1 M" Z $end
$var wire 1 N" nor1 $end
$var wire 1 O" nor2 $end
$var wire 1 P" nor3 $end
$var wire 1 Q" or1 $end
$var wire 1 R" xor1 $end
$var wire 1 S" xor2 $end
$upscope $end
$scope module d2u $end
$var wire 1 T" A $end
$var wire 1 U" B $end
$var wire 1 V" C $end
$var wire 1 W" D $end
$var wire 1 X" E $end
$var wire 1 Y" X $end
$var wire 1 Z" Y $end
$var wire 1 [" Z $end
$var wire 1 \" nor1 $end
$var wire 1 ]" nor2 $end
$var wire 1 ^" nor3 $end
$var wire 1 _" or1 $end
$var wire 1 `" xor1 $end
$var wire 1 a" xor2 $end
$upscope $end
$scope module d3v $end
$var wire 1 b" A $end
$var wire 1 c" B $end
$var wire 1 d" C $end
$var wire 1 e" D $end
$var wire 1 f" E $end
$var wire 1 g" X $end
$var wire 1 h" Y $end
$var wire 1 i" Z $end
$var wire 1 j" nor1 $end
$var wire 1 k" nor2 $end
$var wire 1 l" nor3 $end
$var wire 1 m" or1 $end
$var wire 1 n" xor1 $end
$var wire 1 o" xor2 $end
$upscope $end
$scope module d4w $end
$var wire 1 @" A $end
$var wire 1 p" B $end
$var wire 1 q" C $end
$var wire 1 r" D $end
$var wire 1 s" E $end
$var wire 1 t" X $end
$var wire 1 u" Y $end
$var wire 1 v" Z $end
$var wire 1 w" nor1 $end
$var wire 1 x" nor2 $end
$var wire 1 y" nor3 $end
$var wire 1 z" or1 $end
$var wire 1 {" xor1 $end
$var wire 1 |" xor2 $end
$upscope $end
$scope module d5x $end
$var wire 1 }" A $end
$var wire 1 ~" B $end
$var wire 1 !# C $end
$var wire 1 "# D $end
$var wire 1 ## E $end
$var wire 1 $# X $end
$var wire 1 %# Y $end
$var wire 1 &# Z $end
$var wire 1 '# nor1 $end
$var wire 1 (# nor2 $end
$var wire 1 )# nor3 $end
$var wire 1 *# or1 $end
$var wire 1 +# xor1 $end
$var wire 1 ,# xor2 $end
$upscope $end
$scope module d6y $end
$var wire 1 -# A $end
$var wire 1 .# B $end
$var wire 1 /# C $end
$var wire 1 0# D $end
$var wire 1 1# E $end
$var wire 1 2# X $end
$var wire 1 3# Y $end
$var wire 1 4# Z $end
$var wire 1 5# nor1 $end
$var wire 1 6# nor2 $end
$var wire 1 7# nor3 $end
$var wire 1 8# or1 $end
$var wire 1 9# xor1 $end
$var wire 1 :# xor2 $end
$upscope $end
$scope module d7z $end
$var wire 1 ;# A $end
$var wire 1 <# B $end
$var wire 1 =# C $end
$var wire 1 ># D $end
$var wire 1 ?# E $end
$var wire 1 @# X $end
$var wire 1 A# Y $end
$var wire 1 B# Z $end
$var wire 1 C# nor1 $end
$var wire 1 D# nor2 $end
$var wire 1 E# nor3 $end
$var wire 1 F# or1 $end
$var wire 1 G# xor1 $end
$var wire 1 H# xor2 $end
$upscope $end
$upscope $end
$scope module lU $end
$var wire 4 I# A [3:0] $end
$var wire 4 J# B [3:0] $end
$var wire 3 K# opCode [2:0] $end
$var wire 4 L# xor1 [3:0] $end
$var wire 4 M# resultX [3:0] $end
$var wire 4 N# resultO [3:0] $end
$var wire 4 O# resultA [3:0] $end
$var wire 4 P# or1 [3:0] $end
$var wire 4 Q# and1 [3:0] $end
$upscope $end
$scope module mU $end
$var wire 4 R# A [3:0] $end
$var wire 4 S# B [3:0] $end
$var wire 1 T# overflow2 $end
$var wire 1 U# overflow1 $end
$var wire 1 V# overflow0 $end
$var wire 4 W# b0 [3:0] $end
$var wire 4 X# a2 [3:0] $end
$var wire 4 Y# a1 [3:0] $end
$var wire 4 Z# a0 [3:0] $end
$var wire 8 [# Y [7:0] $end
$var wire 5 \# S2 [4:0] $end
$var wire 5 ]# S1 [4:0] $end
$var wire 5 ^# S0 [4:0] $end
$scope module add0 $end
$var wire 4 _# A [3:0] $end
$var wire 4 `# B [3:0] $end
$var wire 1 a# CarryIN $end
$var wire 1 V# overflow $end
$var wire 4 b# Y [3:0] $end
$var wire 1 c# CarryOUT $end
$var wire 3 d# Carry4 [2:0] $end
$scope module f0 $end
$var wire 1 e# A $end
$var wire 1 f# B $end
$var wire 1 a# Carry $end
$var wire 1 g# CarryO $end
$var wire 1 h# xor1 $end
$var wire 1 i# and2 $end
$var wire 1 j# and1 $end
$var wire 1 k# Sum $end
$scope module h1 $end
$var wire 1 e# A $end
$var wire 1 f# B $end
$var wire 1 j# Carry $end
$var wire 1 h# Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 h# A $end
$var wire 1 a# B $end
$var wire 1 i# Carry $end
$var wire 1 k# Sum $end
$upscope $end
$upscope $end
$scope module f1 $end
$var wire 1 l# A $end
$var wire 1 m# B $end
$var wire 1 n# Carry $end
$var wire 1 o# CarryO $end
$var wire 1 p# xor1 $end
$var wire 1 q# and2 $end
$var wire 1 r# and1 $end
$var wire 1 s# Sum $end
$scope module h1 $end
$var wire 1 l# A $end
$var wire 1 m# B $end
$var wire 1 r# Carry $end
$var wire 1 p# Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 p# A $end
$var wire 1 n# B $end
$var wire 1 q# Carry $end
$var wire 1 s# Sum $end
$upscope $end
$upscope $end
$scope module f2 $end
$var wire 1 t# A $end
$var wire 1 u# B $end
$var wire 1 v# Carry $end
$var wire 1 w# CarryO $end
$var wire 1 x# xor1 $end
$var wire 1 y# and2 $end
$var wire 1 z# and1 $end
$var wire 1 {# Sum $end
$scope module h1 $end
$var wire 1 t# A $end
$var wire 1 u# B $end
$var wire 1 z# Carry $end
$var wire 1 x# Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 x# A $end
$var wire 1 v# B $end
$var wire 1 y# Carry $end
$var wire 1 {# Sum $end
$upscope $end
$upscope $end
$scope module f3 $end
$var wire 1 |# A $end
$var wire 1 }# B $end
$var wire 1 ~# Carry $end
$var wire 1 c# CarryO $end
$var wire 1 !$ xor1 $end
$var wire 1 "$ and2 $end
$var wire 1 #$ and1 $end
$var wire 1 $$ Sum $end
$scope module h1 $end
$var wire 1 |# A $end
$var wire 1 }# B $end
$var wire 1 #$ Carry $end
$var wire 1 !$ Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 !$ A $end
$var wire 1 ~# B $end
$var wire 1 "$ Carry $end
$var wire 1 $$ Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module add1 $end
$var wire 4 %$ A [3:0] $end
$var wire 4 &$ B [3:0] $end
$var wire 1 '$ CarryIN $end
$var wire 1 U# overflow $end
$var wire 4 ($ Y [3:0] $end
$var wire 1 )$ CarryOUT $end
$var wire 3 *$ Carry4 [2:0] $end
$scope module f0 $end
$var wire 1 +$ A $end
$var wire 1 ,$ B $end
$var wire 1 '$ Carry $end
$var wire 1 -$ CarryO $end
$var wire 1 .$ xor1 $end
$var wire 1 /$ and2 $end
$var wire 1 0$ and1 $end
$var wire 1 1$ Sum $end
$scope module h1 $end
$var wire 1 +$ A $end
$var wire 1 ,$ B $end
$var wire 1 0$ Carry $end
$var wire 1 .$ Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 .$ A $end
$var wire 1 '$ B $end
$var wire 1 /$ Carry $end
$var wire 1 1$ Sum $end
$upscope $end
$upscope $end
$scope module f1 $end
$var wire 1 2$ A $end
$var wire 1 3$ B $end
$var wire 1 4$ Carry $end
$var wire 1 5$ CarryO $end
$var wire 1 6$ xor1 $end
$var wire 1 7$ and2 $end
$var wire 1 8$ and1 $end
$var wire 1 9$ Sum $end
$scope module h1 $end
$var wire 1 2$ A $end
$var wire 1 3$ B $end
$var wire 1 8$ Carry $end
$var wire 1 6$ Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 6$ A $end
$var wire 1 4$ B $end
$var wire 1 7$ Carry $end
$var wire 1 9$ Sum $end
$upscope $end
$upscope $end
$scope module f2 $end
$var wire 1 :$ A $end
$var wire 1 ;$ B $end
$var wire 1 <$ Carry $end
$var wire 1 =$ CarryO $end
$var wire 1 >$ xor1 $end
$var wire 1 ?$ and2 $end
$var wire 1 @$ and1 $end
$var wire 1 A$ Sum $end
$scope module h1 $end
$var wire 1 :$ A $end
$var wire 1 ;$ B $end
$var wire 1 @$ Carry $end
$var wire 1 >$ Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 >$ A $end
$var wire 1 <$ B $end
$var wire 1 ?$ Carry $end
$var wire 1 A$ Sum $end
$upscope $end
$upscope $end
$scope module f3 $end
$var wire 1 B$ A $end
$var wire 1 C$ B $end
$var wire 1 D$ Carry $end
$var wire 1 )$ CarryO $end
$var wire 1 E$ xor1 $end
$var wire 1 F$ and2 $end
$var wire 1 G$ and1 $end
$var wire 1 H$ Sum $end
$scope module h1 $end
$var wire 1 B$ A $end
$var wire 1 C$ B $end
$var wire 1 G$ Carry $end
$var wire 1 E$ Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 E$ A $end
$var wire 1 D$ B $end
$var wire 1 F$ Carry $end
$var wire 1 H$ Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module add2 $end
$var wire 4 I$ A [3:0] $end
$var wire 4 J$ B [3:0] $end
$var wire 1 K$ CarryIN $end
$var wire 1 T# overflow $end
$var wire 4 L$ Y [3:0] $end
$var wire 1 M$ CarryOUT $end
$var wire 3 N$ Carry4 [2:0] $end
$scope module f0 $end
$var wire 1 O$ A $end
$var wire 1 P$ B $end
$var wire 1 K$ Carry $end
$var wire 1 Q$ CarryO $end
$var wire 1 R$ xor1 $end
$var wire 1 S$ and2 $end
$var wire 1 T$ and1 $end
$var wire 1 U$ Sum $end
$scope module h1 $end
$var wire 1 O$ A $end
$var wire 1 P$ B $end
$var wire 1 T$ Carry $end
$var wire 1 R$ Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 R$ A $end
$var wire 1 K$ B $end
$var wire 1 S$ Carry $end
$var wire 1 U$ Sum $end
$upscope $end
$upscope $end
$scope module f1 $end
$var wire 1 V$ A $end
$var wire 1 W$ B $end
$var wire 1 X$ Carry $end
$var wire 1 Y$ CarryO $end
$var wire 1 Z$ xor1 $end
$var wire 1 [$ and2 $end
$var wire 1 \$ and1 $end
$var wire 1 ]$ Sum $end
$scope module h1 $end
$var wire 1 V$ A $end
$var wire 1 W$ B $end
$var wire 1 \$ Carry $end
$var wire 1 Z$ Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 Z$ A $end
$var wire 1 X$ B $end
$var wire 1 [$ Carry $end
$var wire 1 ]$ Sum $end
$upscope $end
$upscope $end
$scope module f2 $end
$var wire 1 ^$ A $end
$var wire 1 _$ B $end
$var wire 1 `$ Carry $end
$var wire 1 a$ CarryO $end
$var wire 1 b$ xor1 $end
$var wire 1 c$ and2 $end
$var wire 1 d$ and1 $end
$var wire 1 e$ Sum $end
$scope module h1 $end
$var wire 1 ^$ A $end
$var wire 1 _$ B $end
$var wire 1 d$ Carry $end
$var wire 1 b$ Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 b$ A $end
$var wire 1 `$ B $end
$var wire 1 c$ Carry $end
$var wire 1 e$ Sum $end
$upscope $end
$upscope $end
$scope module f3 $end
$var wire 1 f$ A $end
$var wire 1 g$ B $end
$var wire 1 h$ Carry $end
$var wire 1 M$ CarryO $end
$var wire 1 i$ xor1 $end
$var wire 1 j$ and2 $end
$var wire 1 k$ and1 $end
$var wire 1 l$ Sum $end
$scope module h1 $end
$var wire 1 f$ A $end
$var wire 1 g$ B $end
$var wire 1 k$ Carry $end
$var wire 1 i$ Sum $end
$upscope $end
$scope module h2 $end
$var wire 1 i$ A $end
$var wire 1 h$ B $end
$var wire 1 j$ Carry $end
$var wire 1 l$ Sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module opCd $end
$var wire 3 m$ A [2:0] $end
$var wire 1 n$ and1 $end
$var wire 1 o$ and2 $end
$var wire 1 p$ and3 $end
$var wire 1 q$ and4 $end
$var wire 1 r$ notA $end
$var wire 1 s$ notB $end
$var wire 1 t$ notC $end
$var wire 8 u$ opCode [7:0] $end
$upscope $end
$upscope $end
$scope module s1 $end
$var wire 4 v$ A [3:0] $end
$var wire 12 w$ ALUY [11:0] $end
$var wire 4 x$ B [3:0] $end
$var wire 3 y$ opCodeA [2:0] $end
$var wire 2 z$ select [1:0] $end
$var reg 12 {$ Y [11:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1111 {$
b1 z$
b0 y$
b1111 x$
b10100 w$
b1111 v$
b1 u$
1t$
1s$
1r$
1q$
0p$
0o$
0n$
b0 m$
1l$
1k$
0j$
0i$
1h$
1g$
1f$
1e$
1d$
0c$
0b$
1a$
1`$
1_$
1^$
0]$
0\$
1[$
1Z$
1Y$
1X$
0W$
1V$
0U$
1T$
0S$
0R$
1Q$
1P$
1O$
b111 N$
1M$
b1100 L$
0K$
b1101 J$
b1111 I$
1H$
1G$
0F$
0E$
1D$
1C$
1B$
0A$
0@$
1?$
1>$
1=$
1<$
0;$
1:$
19$
18$
07$
06$
15$
14$
13$
12$
01$
10$
0/$
0.$
1-$
1,$
1+$
b111 *$
1)$
b1010 ($
0'$
b1011 &$
b1111 %$
0$$
0#$
1"$
1!$
1~#
0}#
1|#
1{#
1z#
0y#
0x#
1w#
1v#
1u#
1t#
1s#
1r#
0q#
0p#
1o#
1n#
1m#
1l#
0k#
1j#
0i#
0h#
1g#
1f#
1e#
b111 d#
1c#
b110 b#
0a#
b111 `#
b1111 _#
b10110 ^#
b11010 ]#
b11100 \#
b11100001 [#
b1111 Z#
b1111 Y#
b1111 X#
b111 W#
0V#
0U#
0T#
b1111 S#
b1111 R#
b1111 Q#
b1111 P#
b0 O#
b0 N#
b0 M#
b0 L#
b0 K#
b1111 J#
b1111 I#
1H#
1G#
1F#
1E#
0D#
0C#
1B#
0A#
1@#
0?#
1>#
1=#
1<#
0;#
0:#
09#
18#
07#
16#
15#
04#
03#
02#
01#
00#
0/#
0.#
0-#
1,#
1+#
1*#
0)#
0(#
1'#
1&#
0%#
0$#
1##
1"#
1!#
0~"
0}"
0|"
0{"
1z"
0y"
1x"
1w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
1n"
1m"
0l"
0k"
1j"
0i"
0h"
0g"
1f"
1e"
0d"
0c"
0b"
0a"
0`"
1_"
0^"
1]"
1\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
1Q"
0P"
1O"
1N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
b10100 F"
b0 E"
b0 D"
b1000 C"
b0z B"
b1100 A"
0@"
0?"
b1110 >"
1="
0<"
0;"
0:"
09"
08"
07"
16"
15"
14"
03"
02"
01"
00"
0/"
0."
0-"
1,"
1+"
1*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
1""
1!"
1~
0}
0|
0{
0z
0y
0x
1w
1v
b0 u
bz000 t
b1111 s
b1111 r
1q
1p
0o
0n
1m
1l
1k
1j
1i
0h
0g
1f
1e
1d
1c
1b
1a
0`
0_
1^
1]
1\
1[
0Z
1Y
0X
0W
1V
1U
1T
b111 S
b1110 R
b1111 Q
b1111 P
1O
0N
b1110 M
b1110 L
b0 K
b0 J
0I
0H
1G
b1 F
b1111 E
b1111 D
1C
b1110 B
b1110 A
b0 @
b1110 ?
b10100 >
b0 =
b0 <
b1 ;
b11100001 :
09
b0 8
b0 7
b0 6
b0 5
b1110 4
b0 3
b1110 2
b0 1
00
b1111 /
b1111 .
b1111 -
b1 ,
b10100 +
b1 *
b0 )
b1111 (
b1111 '
b1 &
b0 %
b1111 $
b1111 #
b1111 "
b1 !
$end
#5
1D#
1(#
0@#
0E#
1C#
0<#
0&#
0,#
0H#
0A#
0B#
1k"
0!#
0=#
1F#
0n"
b0 C"
0f"
0+#
b0 A"
0##
0G#
b1 +
b1 >
b1 F"
b1 w$
0?#
0e"
0"#
0>#
0O
0M$
b1 B
b1 >"
0I
0g$
0T#
0m
0h$
b1 4
0f
0,$
03$
0<$
0)$
0a$
0C$
05$
0U#
b1 2
0e
b1 @
0s#
0{#
0;$
0D$
0P$
0W$
0_$
0`$
0G
0^
0n#
0v#
0~#
0c#
b0 &$
04$
0=$
b0 J$
0X$
0Y$
b0 A
b0 ?
b0 L
1#"
1-"
17"
b1 5
b1 J
1H
0g#
0o#
b0 d#
0w#
0"$
b0 ^#
b0 b#
0$$
b0 *$
0-$
01$
07$
09$
0?$
0A$
0F$
b0 ]#
b0 ($
0H$
b0 N$
0Q$
0U$
0[$
0]$
0c$
0e$
0j$
b0 \#
b0 L$
0l$
0]
1x
1$"
bz111 t
1."
1N
0j#
0r#
0z#
0!$
00$
0.$
08$
06$
0>$
0G$
0E$
0T$
0R$
0Z$
0d$
0b$
0k$
0i$
b10 F
b0 S
0V
1Z
0`
1b
0h
1j
0o
b1111 M
b1111 R
1q
1|
0~
1{
0("
0*"
1'"
02"
04"
11"
b1 K
b1 u
0;"
0="
1:"
0f#
0m#
0u#
0e#
0l#
0t#
0|#
0+$
02$
0:$
0B$
0O$
0V$
0^$
0f$
0t$
b10 ;
b10 u$
0Y
1W
0a
1_
0i
1g
0p
1n
1y
1}
1%"
1)"
1/"
13"
18"
1<"
b0 Q#
b1111 L#
b0 :
b0 [#
b0 W#
b0 `#
b0 Z#
b0 _#
b0 Y#
b0 %$
b0 X#
b0 I$
0T
0[
0c
0k
0v
0!"
0+"
05"
b1 %
b1 )
b1 1
b1 m$
b1 y$
b0 #
b0 '
b0 .
b0 D
b0 P
b0 r
b0 I#
b0 R#
b0 v$
#10
1@#
1E#
0C#
1<#
1B#
1&#
1H#
1,#
0D#
0(#
1=#
0k"
1!#
1G#
0?#
1+#
b1100 A"
1##
1n"
b1000 C"
1f"
1>#
1"#
1e"
b10100 +
b10100 >
b10100 F"
b10100 w$
b1110 B
b1110 >"
b1 \#
b1 L$
1U$
1O
1R$
1o
0q
0I
b1110 4
1P$
1m
b1 J$
1f
b1110 2
11$
b11 ]#
b11 ($
19$
1h
0j
1.$
16$
1e
b1110 @
1,$
13$
1^
1("
b11 &$
12"
1;"
b0 !
b0 ,
0C
1`
0b
b1110 5
b1110 J
0#"
1k#
1s#
b111 ^#
b111 b#
1{#
0-"
07"
0H
1]
0x
1h#
1p#
1x#
0$"
bz000 t
0."
0N
b111 S
1V
b0 M
b0 R
0Z
b1110 K
b1110 u
0|
1~
0{
1f#
1m#
1u#
0'"
01"
0:"
1Y
0W
0y
0}
0)"
03"
0<"
b1 Q#
b1110 L#
b1111 :
b1111 [#
b111 W#
b111 `#
0\
0d
0l
0""
0,"
06"
1T
1[
1c
1k
1v
1!"
1+"
15"
b1 "
b1 -
b1 {$
b1 $
b1 (
b1 /
b1 E
b1 Q
b1 s
b1 J#
b1 S#
b1 x$
b1111 #
b1111 '
b1111 .
b1111 D
b1111 P
b1111 r
b1111 I#
b1111 R#
b1111 v$
#15
b10100 "
b10100 -
b10100 {$
b11 &
b11 *
b11 z$
#20
